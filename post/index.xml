<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 七哥的随心谈</title>
    <link>http://blog.thinkqs.com/post/</link>
    <description>Recent content in Posts on 七哥的随心谈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 07 Sep 2016 13:48:27 +0800</lastBuildDate>
    <atom:link href="http://blog.thinkqs.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang学习问题1</title>
      <link>http://blog.thinkqs.com/post/golang-qa/</link>
      <pubDate>Wed, 07 Sep 2016 13:48:27 +0800</pubDate>
      
      <guid>http://blog.thinkqs.com/post/golang-qa/</guid>
      <description>&lt;p&gt;&lt;em&gt;go编译出的程序有系统依赖吗?&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;有,go是编译性语言.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;slice内存,引用数组的内存&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    d := []int{1, 2, 3, 4}
    e := d[2:]
    f := e
    fmt.Println(&amp;quot;d1 =&amp;quot;, d)
    fmt.Println(&amp;quot;e1 =&amp;quot;, e)
    fmt.Println(&amp;quot;f1 =&amp;quot;, f)
    e = append(e, 5, 6)
    e[1] = 7
    fmt.Println(&amp;quot;d2 =&amp;quot;, d)
    fmt.Println(&amp;quot;e2 =&amp;quot;, e)
    fmt.Println(&amp;quot;f2 =&amp;quot;, f)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;e在append前指向d[2:], append后超出cap, 新分配cap*2的内存并copy原数据
d在append前,对e进行操作d会受到影响,append后不再受影响.
f并没有受e的append影响,仍然保留原值.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;nil slice和empty slice的append内存扩展机制&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var slice []int

fmt.Println(&amp;quot;nil len =&amp;quot;, len(slice))
fmt.Println(&amp;quot;nil cap =&amp;quot;, cap(slice))

newSlice := append(slice, 5, 99)

fmt.Println(&amp;quot;newSlice len =&amp;quot;, len(newSlice))
fmt.Println(&amp;quot;newSlice cap =&amp;quot;, cap(newSlice))

newSlice = append(newSlice, 6)

fmt.Println(&amp;quot;newSlice len =&amp;quot;, len(newSlice))
fmt.Println(&amp;quot;newSlice cap =&amp;quot;, cap(newSlice))

newSlice = append(newSlice, 7)

fmt.Println(&amp;quot;newSlice len =&amp;quot;, len(newSlice))
fmt.Println(&amp;quot;newSlice cap =&amp;quot;, cap(newSlice))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;初始len和cap为0
第一次append n个数据后, len和cap为n
之后规则和正常数组相同
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;不要通过共享来通信,而要通过通信来共享.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;所有进程都阻塞后会报dead lock.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    c := make(chan int, 1)
    c &amp;lt;- 1
    c &amp;lt;- 2
    fmt.Println(&amp;lt;-c)
    fmt.Println(&amp;lt;-c)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>